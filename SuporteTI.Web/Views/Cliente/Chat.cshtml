@model SuporteTI.Web.Models.ChatViewModel

@{
    ViewData["Title"] = "Chat do Chamado";
    string corStatus = "#0d6efd";
    switch (Model.Chamado.StatusChamado?.ToLower())
    {
        case "em andamento": corStatus = "#ff9800"; break;
        case "resolvido": corStatus = "#28a745"; break;
        case "encerrado": corStatus = "#dc3545"; break;
    }

    var ultimaSolucao = Model.Solucoes?.LastOrDefault();
}

<h2>Chamado #@Model.Chamado.IdChamado</h2>

<div style="border:1px solid #ccc;border-radius:8px;padding:15px;margin-bottom:10px;background-color:#fff;">
    <p><strong>Título:</strong> @Model.Chamado.Titulo</p>
    <p><strong>Descrição:</strong> @Model.Chamado.Descricao</p>
    <p>
        <strong>Status:</strong>
        <span id="status-text" style="color:@corStatus;font-weight:bold;">
            @Model.Chamado.StatusChamado
        </span>
    </p>

    <!-- 📎 Lista de Anexos -->
    @if (Model.Anexos != null && Model.Anexos.Any())
    {
        <div style="margin-top:10px;padding:10px;border:1px solid #ccc;border-radius:8px;background-color:#f8f9fa;">
            <h5 style="margin-bottom:8px;">📎 Anexos</h5>
            <ul style="list-style:none;padding-left:0;margin:0;">
                @foreach (var anexo in Model.Anexos)
                {
                    <li style="margin-bottom:6px;display:flex;justify-content:space-between;align-items:center;">
                        <div>
                            <strong>@anexo.NomeArquivo</strong>
                            <small style="color:#6c757d;">(@anexo.DataEnvio.ToString("dd/MM/yyyy HH:mm"))</small>
                        </div>
                        <form asp-controller="Cliente" asp-action="BaixarAnexo" method="post" style="margin:0;">
                            <input type="hidden" name="idAnexo" value="@anexo.IdAnexo" />
                            <input type="hidden" name="idChamado" value="@Model.Chamado.IdChamado" />
                            <button type="submit" class="btn"
                                    style="background-color:#0d6efd;color:white;border:none;padding:5px 12px;border-radius:6px;">
                                <i class="bi bi-download"></i> Baixar
                            </button>
                        </form>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <p style="margin-top:10px;color:gray;">Nenhum anexo enviado ainda.</p>
    }
</div>

<!-- 💬 Chat -->
<div id="chat-container"
     style="border:1px solid #ccc;border-radius:8px;height:420px;overflow-y:auto;padding:15px;background-color:#f5f6f8;">
    @await Html.PartialAsync("_ChatMensagens", Model)
</div>

@{
    var aviso = TempData["Aviso"] ?? ViewBag.AvisoPermanente;
}
@if (aviso != null)
{
    <div style="margin-top:12px;
                    padding:10px 15px;
                    border-radius:8px;
                    font-weight:600;
                    background-color:#eaf4ff;
                    color:#004085;
                    border:1px solid #b6d4fe;
                    text-align:center;">
        <i class="bi bi-info-circle-fill"></i> @aviso
    </div>
}



<!-- 📤 Enviar Anexo -->
@if (Model.Chamado.StatusChamado?.ToLower() == "aberto" || Model.Chamado.StatusChamado?.ToLower() == "em andamento")
{
    <form asp-controller="Cliente" asp-action="EnviarAnexo" method="post" enctype="multipart/form-data" style="margin-top:10px;">
        <input type="hidden" name="idChamado" value="@Model.Chamado.IdChamado" />
        <label for="arquivo" style="font-weight:600;">Adicionar anexo:</label>
        <input type="file" name="arquivo" required class="form-control"
               style="margin-top:5px;margin-bottom:8px;max-width:400px;" />
        <button type="submit" class="btn"
                style="background-color:#0d6efd;color:white;border:none;padding:8px 16px;border-radius:6px;">
            <i class="bi bi-upload"></i> Enviar Anexo
        </button>
    </form>
}

<!-- ✉️ Enviar Mensagem -->
@if (Model.Chamado.StatusChamado?.ToLower() == "aberto" || Model.Chamado.StatusChamado?.ToLower() == "em andamento")
{
    <form asp-controller="Cliente" asp-action="EnviarMensagem" method="post" style="margin-top:10px;display:flex;gap:10px;">
        <input type="hidden" name="IdChamado" value="@Model.Chamado.IdChamado" />
        <input type="text" name="Mensagem" class="form-control"
               placeholder="Digite sua mensagem..."
               style="flex:1;padding:8px;border-radius:6px;border:1px solid #ccc;" />
        <button type="submit" class="btn"
                style="background-color:#0d6efd;color:white;border:none;padding:8px 20px;border-radius:6px;">
            <i class="bi bi-send-fill"></i> Enviar
        </button>
    </form>
}
else
{
    <div style="margin-top:10px;color:gray;font-style:italic;">
        O chamado está encerrado. Você não pode mais enviar mensagens.
    </div>
}

<!-- ✅ Modal de Avaliação -->
@await Html.PartialAsync("~/Views/Shared/_AvaliacaoModal.cshtml")

@if (Context.Request.Query.ContainsKey("avaliar") &&
    Context.Request.Query["avaliar"].ToString().ToLower() == "true")
{
    <div id="trigger-avaliacao"
         data-id="@Model.Chamado.IdChamado"
         style="display:none"></div>
}

@section Scripts {
    <script>
        const idChamado = @Model.Chamado.IdChamado;

        // 🔄 Atualiza o chat a cada 5 segundos
        async function atualizarChat() {
            try {
                const resp = await fetch(`/Cliente/ChatPartial?id=${idChamado}`);
                if (!resp.ok) return;
                const html = await resp.text();
                const chatContainer = document.getElementById("chat-container");
                if (chatContainer) {
                    const estavaNoFinal = chatContainer.scrollTop + chatContainer.clientHeight >= chatContainer.scrollHeight - 10;
                    chatContainer.innerHTML = html;
                    if (estavaNoFinal) chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            } catch (e) {
                console.warn("Erro ao atualizar chat:", e);
            }
        }

        setInterval(atualizarChat, 5000);

        // ✅ Abre o modal de avaliação assim que o parâmetro 'avaliar=true' chega
        window.addEventListener("DOMContentLoaded", () => {
            const params = new URLSearchParams(window.location.search);
            if (params.get("avaliar") === "true") {
                const abrirModal = () => {
                    if (window.AvaliacaoModal) {
                        AvaliacaoModal.abrir(@Model.Chamado.IdChamado);
                        // Limpa o parâmetro pra não reabrir
                        const novaUrl = window.location.pathname;
                        window.history.replaceState({}, document.title, novaUrl);
                    } else {
                        console.warn("AvaliacaoModal ainda não disponível, tentando novamente...");
                        setTimeout(abrirModal, 300); // tenta até carregar
                    }
                };
                abrirModal();
            }
        });

        // ⏳ Faz o aviso sumir automaticamente (menos o fixo de técnico)
        window.addEventListener("load", () => {
            const aviso = document.querySelector(".alert-info, #aviso-container");
            if (aviso) {
                const texto = aviso.innerText.toLowerCase();
                if (!texto.includes("encaminhada para um técnico")) {
                    setTimeout(() => {
                        aviso.style.opacity = "0";
                        aviso.style.transition = "opacity 1s";
                        setTimeout(() => aviso.remove(), 1000);
                    }, 4000);
                }
            }
        });
    </script>

}




   

